"""Output rendering logic for GeoJSON."""
from datetime import datetime

import orjson
from django.utils.timezone import utc

from .base import GetFeatureOutputRenderer


class GeoJsonRenderer(GetFeatureOutputRenderer):
    """Fast GeoJSON renderer, using a stream response.

    The complex encoding bits are handled by the C-library "orjson"
    and the geojson property of GEOSGeometry.

    NOTE: While Django has a GeoJSON serializer
    (see https://docs.djangoproject.com/en/3.0/ref/contrib/gis/serializers/),
    it does not offer streaming response handling.
    """

    content_type = "application/json; charset=utf-8"

    def render_get_feature(
        self, feature_collections, number_matched, number_returned, next, previous
    ):
        crs = orjson.dumps(str(self.output_crs))
        yield (
            b"{\n"
            b'  "type": "FeatureCollection",\n'
            b'  "totalFeatures": %d,\n'
            b'  "crs": {"type": "name", "properties": {"name": %b}},\n'
            b'  "features": [\n'
        ) % (number_matched, crs)

        # Flatten the results, they are not grouped in a second FeatureCollection
        for feature, qs, number_matched in feature_collections:
            is_next = True
            for instance in qs:
                # Get all instance attributes:
                geo_value = getattr(instance, feature.geometry_field_name)
                geometry = (
                    geo_value.geojson.encode() if geo_value is not None else b"null"
                )
                properties = {
                    name: self._format_geojson_value(getattr(instance, name))
                    for name, _ in feature.fields
                    if name not in feature.geometry_field_names
                }

                if not is_next:
                    yield b",\n"

                # The "properties" object is generated by orjson.dumps(),
                # while the "geometry" object built-in using GEOSGeometry.geojson
                yield (
                    b"    {"
                    b'"type": "Feature", '
                    b'"id":%b, '
                    b'"geometry_name":%b,'
                    b'"geometry":%b,'
                    b'"properties":%b'
                    b"}"
                ) % (
                    orjson.dumps(f"{feature.name}.{instance.pk}"),
                    orjson.dumps(str(instance)),
                    geometry,
                    orjson.dumps(properties),
                )
                is_next = False

        yield b"\n  ]\n"
        yield b"}\n"

    def _format_geojson_value(self, value):
        if isinstance(value, datetime):
            return value.astimezone(utc)
        else:
            return value
